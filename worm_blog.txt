
Couple years ago I wanted to learn how runtime of interpreted languages work. A good opportunity arose when Minecraft creator Notch published his new game idea called 0x10c. Game was supposedly situated in a far far future, in a dying universe with bunch of people waking up from deep hibernation. The best part of the game concept was undeniably the in-game fictional technology. Space faring was common, but computer technology was limited to that of the 80's. The Crown Jewel of the game was its fictional computer - the DCPU. It was fully 16 bit computer that was able to execute opcodes that formed a perfect basis for simple assembler. 

After couple of months and sleepless nights I completed a little interpreter of my own. The interpreter was capable of executing a simple language, not quite a subset of python, but still similar in syntax. It gave me a huge sense of accomplishment to see my own little interpreter - build from bare assembler instructions, to execute Hammurabi. Soon after Notch abandoned the project and for couple of years my interpreter laid buried in the github graveyear of useless hacks.

However, last summer I rediscovered the assembler code for my home made interpreter and started to play with the idea to implement it in c. There were some really good lessons to learn hidden in the assembler code. I thought that it would be beneficial to translate those ideas into more readable c language, so that I could more easily refresh my memory just by reading the code.
